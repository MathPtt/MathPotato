searchState.loadedDescShard("MathPotato", 0, "MathPotato Programming Language\nParses an integer variable assignment.\nParses integer, i32, statement expression based on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis enum represents the possible values in the language.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the root node by id.\nCalls <code>U::from(self)</code>.\nAdds a new node to the AST.\nDefines that ever typed AST tree has to have a method …\nDefines that every typed AST tree has to have a size …\nRepresents an i32 value of the language.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the InfixOperationAstNode node is in the right …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>IntegerStatementAstNode</code> represents a code block where …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents an Integer, <code>i32</code>, value in a tree of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIt represents the i32 type in the MathPotato source code …\nrepresents an integer value assignment, like …\nrepresents an integer value assignment, like …\nRepresents an Integer, <code>i32</code>, value in the AST\nRepresents an Integer, <code>i32</code>, value in the AST\nrepresents a <code>null</code> like value\nrepresents a <code>null</code> like value\nRepresents the nodes in the Potato Abstract Syntax Tree. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a single character in the parsed source code. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe literal value of the token. It plays a crucial role …\nThe token type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")