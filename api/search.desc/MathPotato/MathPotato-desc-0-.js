searchState.loadedDescShard("MathPotato", 0, "MathPotato Programming Language\nParses an integer variable assignment.\nParses integer, i32, statement expression based on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a cloned instance from the last modified <code>PotatoAstNode</code>.\nReturns cloned underlying <code>HashMap&lt;usize, PotatoAstNode&gt;</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIt represents an infix operator in the Abstract Syntax …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>IntegerStatementAstNode</code> represents a code block where …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents an Integer, <code>i32</code>, value in a tree of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nrepresents an integer value assignment, like …\nRepresents an Integer, <code>i32</code>, value in the AST\nrepresents a <code>null</code> like value\nRepresents the nodes in the Potato Abstract Syntax Tree. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a single character in the parsed source code. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe literal value of the token. It plays a crucial role …\nThe token type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")