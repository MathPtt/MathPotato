searchState.loadedDescShard("MathPotato", 0, "MathPotato Programming Language\nThis enum represents the possible values in the language.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the Abstract Syntax Tree of the Programming …\nReturns the argument unchanged.\nReturns the root node by id.\nThe node tree to represent the i32 data type.\nThe node tree to represent the infix operation nodes.\nCalls <code>U::from(self)</code>.\nA reference to the last changed AST node.\nThe type of the last changed node.\nA reference to the Root AST node.\nThe type of the root AST node.\nThe Continuation Node Api\nReturns the Id and Type of the Continuation Node.\nThe I32 Api\nReturns the I32AstNode with the designated id.\nReturns the length of the i32 datatype tree size.\nAdds a new <code>I32AstNode</code> to the AST.\nUpdates the designated <code>I32AstNode</code> node with the provided …\nRoot Node Api of the Abstract Syntax Tree\nReturns the root node by id.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nI32 datatype AST node\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>IntegerStatementAstNode</code> represents a code block where …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents an Integer, <code>i32</code>, value in a tree of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines that ever typed AST tree has to have a method …\nDefines that every typed AST tree has to have a size …\nRepresents an i32 value of the language.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the InfixOperationAstNode node is in the right …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIt represents the i32 type in the MathPotato source code …\nrepresents an integer value assignment, like …\nrepresents an integer value assignment, like …\nRepresents an Integer, <code>i32</code>, value in the AST\nRepresents an Integer, <code>i32</code>, value in the AST\nrepresents a <code>null</code> like value\nrepresents a <code>null</code> like value\nRepresents the nodes in the Potato Abstract Syntax Tree. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a single character in the parsed source code. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe literal value of the token. It plays a crucial role …\nThe token type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses an integer variable assignment.\nParses integer, i32, statement expression based on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")