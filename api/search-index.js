var searchIndex = new Map(JSON.parse('[["MathPotato",{"t":"CCHCCCCCCCCCCCCCCCGPPPNNNNNNNNNNNNNNFNNNNNNCNNNNNNNNNNCCCCNOONNOONNNNCOONNNNNNNKMKMKMKMKMKMMMMMFNNNNNNNNNNNNNNNNNONNNNFNNNNNONNNOONNNNOFNNNNNNNNNNNNNNNONNNNPGNNNNNNNNNNNNNFNNNNNNNNNONNONNNOOOFNNNNNNNNNONNNNONNNNOCCCCKKMMFNNNNNNNNNNOONNNNOFNNNNNNNNNNNNNNNNNONNNNFNNNNNNNNNNNNNNNNOONOOONNNNSSSSSSSSPPPPPPGKGNNNNNNNNNNNNNNNNNNMNNNNNNNNNNFNNNNNNNNNONONNNPPPPPPGPPPPNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNCHHHHHHCCCHHHHHFNNONNNNNNN","n":["ast","lexer","main","parser","ast_node_types_enum","ast_tree","i32_ast_tree","i32_node","infix_operation_ast_tree","infix_operation_enum","integer_statement_ast_node","integer_value_expression_ast_node","internal","patterns","potato_ast_node","potato_token","potato_token_types","variable_state_enum","AstNodeType","I32AstNode","InfixOperationAstNode","None","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","MathPotatoAstTree","add_root_node_id_and_type","borrow","borrow_mut","clone","clone_into","clone_to_uninit","continuation_node_api","default","fmt","from","get_continuation_node_id_and_type","get_i32_node_by_id","get_infix_node_by_id","get_infix_nodes","get_root_node_id","get_root_node_infix","get_root_node_type","i32_api_get_node_by_id","i32_api_node_count","i32_api_put_node","i32_api_update_node","i32_node_count","i32_tree","infix_operation_tree","infix_tree_len","into","last_changed_node_id","last_changed_node_type","merge","new","put_i32_ast_node","put_infix_node","root_node_api","root_node_id","root_node_type","to_owned","try_from","try_into","type_id","update_i32_node","update_infix_node_by_id","update_root_node_id_and_type","ContinuationNodeApi","get_continuation_node_id_and_type","I32ApiGetNodeById","get_i32_node_by_id","I32ApiNodeCount","i32_node_count","I32ApiPutNode","put_i32_ast_node","I32ApiUpdateNode","update_i32_node","RootNodeApi","add_root_node_id_and_type","get_root_node_id","get_root_node_infix","get_root_node_type","update_root_node_id_and_type","I32AstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get_node_by_id","get_nodes","get_tree_count","into","keys","len","new","put","put_all","to_owned","tree","try_from","try_into","type_id","update","I32AstNode","borrow","borrow_mut","fmt","from","from_internal_and_id","id","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_internal","try_from","try_into","type_id","value","InfixOperationAstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get","get_all","into","keys","len","new","put","to_owned","tree","try_from","try_into","type_id","update","Addition","InfixOperationType","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","to_owned","try_from","try_into","type_id","IntegerStatementAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","to_owned","token_type","try_from","try_into","type_id","variable_name","variable_state","variable_value","IntegerValueExpressionAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","new_with_guid_and_value","new_with_value","new_with_value_and_parent","parent","to_owned","try_from","try_into","type_id","value","ast_tree_traits","i32_ast_node_internal","i32_ast_tree","infix_operation_ast_node","TypedAstTreeGetKeys","TypedAstTreeLen","keys","len","I32AstNodeInternal","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_owned","try_from","try_into","type_id","value","I32AstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get_node_by_id","get_nodes","get_tree_count","into","keys","len","new","put","put_all","to_owned","tree","try_from","try_into","type_id","update","InfixAstNodeInternal","add_i32node_to_the_right","borrow","borrow_mut","check_if_left_empty_right_occupied","clone","clone_into","clone_to_uninit","fmt","from","get_left_node_id_and_type","get_operation_type","get_right_node","get_right_node_id_and_type","into","is_left_occupied","is_right_occupied","left_id","left_type","new_with_type_and_left_child_node","operation_type","right_id","right_type","to_owned","try_from","try_into","type_id","KEYWORD_I32","SIGN_ADDITION","SIGN_ASSIGNMENT","SIGN_CLOSE_PARENTHESES","SIGN_DIVISION","SIGN_OPEN_PARENTHESES","SIGN_SEMICOLON","WHITESPACE","IntegerStatementAstNode","","IntegerValueExpressionAstNode","","None","","PotatoAstNode","PotatoAstNodeGUID","PotatoAstNodeKind","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","eq","","fmt","","from","","get_uuid","into","","to_owned","","try_from","","try_into","","type_id","","PotatoToken","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","literal_value","to_owned","token_type","try_from","try_into","type_id","KeywordI32","LiteralIntegerValue","LiteralValueVariableIdentifier","None","OperationAddition","OperationDivision","PotatoTokenTypes","SignAssignment","SignCloseParentheses","SignOpenParentheses","SignSemicolon","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","","from","into","to_owned","to_string","try_from","try_into","type_id","Default","Final","Processing","VariableState","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","lexer","is_integer_value","is_token_semicolon","is_token_whitespace","lexing","tokenize","parse","parse_i32_statement","parse_i32_statement_expression","parser_error","create_error_message","parse_i32_statement","error_message","parse_i32_statement_expression","parse_literal_to_i32","ParseError","borrow","borrow_mut","details","fmt","from","into","new","try_from","try_into","type_id"],"q":[[0,"MathPotato"],[4,"MathPotato::ast"],[18,"MathPotato::ast::ast_node_types_enum"],[36,"MathPotato::ast::ast_tree"],[79,"MathPotato::ast::ast_tree::continuation_node_api"],[81,"MathPotato::ast::ast_tree::i32_api_get_node_by_id"],[83,"MathPotato::ast::ast_tree::i32_api_node_count"],[85,"MathPotato::ast::ast_tree::i32_api_put_node"],[87,"MathPotato::ast::ast_tree::i32_api_update_node"],[89,"MathPotato::ast::ast_tree::root_node_api"],[95,"MathPotato::ast::i32_ast_tree"],[118,"MathPotato::ast::i32_node"],[135,"MathPotato::ast::infix_operation_ast_tree"],[156,"MathPotato::ast::infix_operation_enum"],[171,"MathPotato::ast::integer_statement_ast_node"],[191,"MathPotato::ast::integer_value_expression_ast_node"],[212,"MathPotato::ast::internal"],[216,"MathPotato::ast::internal::ast_tree_traits"],[220,"MathPotato::ast::internal::i32_ast_node_internal"],[238,"MathPotato::ast::internal::i32_ast_tree"],[261,"MathPotato::ast::internal::infix_operation_ast_node"],[288,"MathPotato::ast::patterns"],[296,"MathPotato::ast::potato_ast_node"],[334,"MathPotato::ast::potato_token"],[350,"MathPotato::ast::potato_token_types"],[377,"MathPotato::ast::variable_state_enum"],[395,"MathPotato::lexer"],[396,"MathPotato::lexer::lexer"],[401,"MathPotato::parser"],[405,"MathPotato::parser::parse_i32_statement"],[407,"MathPotato::parser::parse_i32_statement_expression"],[410,"MathPotato::parser::parser_error"],[421,"core::fmt"],[422,"core::result"],[423,"core::any"],[424,"uuid"],[425,"core::option"],[426,"alloc::vec"],[427,"std::collections::hash::map"],[428,"alloc::string"]],"i":"```````````````````h0000000000000000`Af00000`0000000000````00000000000`000000000`Bl`Bn`C``Cb`Cd`Cf0000`Bh000000000000000000000`B`000000000000000`Bj0000000000000000000Cn`0000000000000`D`000000000000000000`Dh0000000000000000000``````DjDl`Ch0000000000000000`Dn000000000000000000000`Bb0000000000000000000000000````````E`Eb1010```101010101010101010El2121212121`Ed00000000000000Db00000`00000000000000000000Df00`00000000000000````````````````Al000000000","f":"``{{}b}```````````````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{h}}}h}{{d{d{fc}}}b{}}{{dj}b}{{}h}{{{d{h}}{d{h}}}l}{{{d{h}}{d{fn}}}A`}{cc{}}{{}c{}}{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}`{{{d{fAf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}>={{{d{Af}}}Af}<;`{{}Af}{{{d{Af}}{d{fn}}}A`}9{{{d{Af}}}{{An{{Aj{Ahh}}}}}}{{{d{Af}}Ah}{{Ab{B`Al}}}}{{{d{Af}}Ah}{{An{{Aj{AhBb}}}}}}{{{d{Af}}}{{Ab{{Bd{{Aj{AhBb}}}}Al}}}}{{{d{Af}}}{{An{Ah}}}}{{{d{Af}}Ah}{{Ab{{Aj{AhBb}}Al}}}}{{{d{Af}}}h}````{{{d{Af}}}Bf}{AfBh}{AfBj}2{{}c{}}{AfAh}{Afh}{{{d{fAf}}Af}{{Ab{bAl}}}}?{{{d{fAf}}B`}{{Ab{B`Al}}}}{{{d{fAf}}Bb}{{Ab{{Aj{AhBb}}Al}}}}`43{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{{{d{fAf}}AhB`}{{Ab{B`Al}}}}{{{d{fAf}}AhBb}{{Ab{{Aj{AhBb}}Al}}}}{{{d{fAf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}`{{{d{Bl}}}{{An{{Aj{Ahh}}}}}}`{{{d{Bn}}Ah}{{Ab{B`Al}}}}`{{{d{C`}}}Bf}`{{{d{fCb}}B`}{{Ab{B`Al}}}}`{{{d{fCd}}AhB`}{{Ab{B`Al}}}}`{{{d{fCf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}{{{d{Cf}}}{{An{Ah}}}}{{{d{Cf}}Ah}{{Ab{{Aj{AhBb}}Al}}}}{{{d{Cf}}}h}3`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bh}}}Bh}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bh}}{d{fn}}}A`}{cc{}}{{{d{Bh}}Ah}{{An{Ch}}}}{{{d{Bh}}{Bd{Ah}}}{{An{{Cj{AhCh}}}}}}{{{d{Bh}}}Bf}{{}c{}}{Bh{{Bd{Ah}}}}2{{}Bh}{{{d{fBh}}AhCh}{{Ab{{Aj{AhCh}}Al}}}}{{{d{fBh}}{Cj{AhCh}}}b}{dc{}}{BhCj}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}6`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{B`}}{d{fn}}}A`}{cc{}}{{ChAh}{{Ab{B`Al}}}}{B`Ah}?{{ClhAh}B`}{ClB`}2{B`h}{{{d{B`}}}{{Ab{ChAl}}}}<;:{B`Cl}`:9{{{d{Bj}}}Bj}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bj}}{d{fn}}}A`};{{{d{Bj}}Ah}{{An{Bb}}}}{{{d{Bj}}}{{Ab{{Bd{{Aj{AhBb}}}}Al}}}}{{}c{}}{Bj{{Bd{Ah}}}}{{{d{Bj}}}Bf}{{}Bj}{{{d{fBj}}AhBb}{{Ab{{Aj{AhBb}}Al}}}}{dc{}}{BjCj}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}5``{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Cn}}}Cn}{{d{d{fc}}}b{}}{{dj}b}{{{d{Cn}}{d{Cn}}}l}{{{d{Cn}}{d{fn}}}A`}{cc{}}{{}c{}}=;:9`87{{{d{D`}}}D`}65{{}D`}{{{d{D`}}{d{D`}}}l}{{{d{D`}}{d{fn}}}A`}5{D`Ah}5{dc{}}{D`Db}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{D`Dd}{D`Df}{D`Cl}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Dh}}}Dh}{{d{d{fc}}}b{}}{{dj}b}{{}Dh}{{{d{Dh}}{d{Dh}}}l}{{{d{Dh}}{d{fn}}}A`}{cc{}}{DhAh}{{}c{}}{{AhCl}Dh}{ClDh}{{ClAh}Dh}4{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{DhCl}``````{Dj{{Bd{Ah}}}}{{{d{Dl}}}Bf}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ch}}}Ch}{{d{d{fc}}}b{}}{{dj}b}{{{d{Ch}}{d{fn}}}A`}{cc{}}{{}c{}}{{ClhAh}Ch}{ClCh}{ChAh}{Chh}{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{ChCl}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Dn}}}Dn}{{d{d{fc}}}b{}}{{dj}b}{{{d{Dn}}{d{fn}}}A`}{cc{}}{{{d{Dn}}Ah}{{An{Ch}}}}{{{d{Dn}}{Bd{Ah}}}{{An{{Cj{AhCh}}}}}}{{{d{Dn}}}Bf}{{}c{}}{Dn{{Bd{Ah}}}}2{{}Dn}{{{d{fDn}}AhCh}{{Ab{{Aj{AhCh}}Al}}}}{{{d{fDn}}{Cj{AhCh}}}b}{dc{}}{DnCj}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}6`{{{d{fBb}}Ah}{{Ab{{Aj{AhBb}}Al}}}}{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bb}}}{{Ab{bAl}}}}{{{d{Bb}}}Bb}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bb}}{d{fn}}}A`}{cc{}}{{{d{Bb}}}{{An{{Aj{Ahh}}}}}}{{{d{Bb}}}Cn}11{{}c{}}{{{d{Bb}}}l}0{BbAh}{Bbh}{{CnhAh}Bb}{BbCn}32{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{{}d}0000000`````````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{E`}}}E`}{{{d{Eb}}}Eb}{{d{d{fc}}}b{}}0{{dj}b}0{{}E`}{{}Eb}{{{d{E`}}{d{E`}}}l}{{{d{Eb}}{d{Eb}}}l}{{{d{E`}}{d{fn}}}A`}{{{d{Eb}}{d{fn}}}A`}{cc{}}0{{}b}{{}c{}}0{dc{}}0{c{{Ab{e}}}{}{}}0{{}{{Ab{c}}}{}}0{dAd}0`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ed}}}Ed}{{d{d{fc}}}b{}}{{dj}b}{{{d{Ed}}{d{Ed}}}l}{{{d{Ed}}{d{fn}}}A`}=;{EdDd};{EdDb};:9```````````87{{{d{Db}}}Db}65{{}Db}{{{d{Db}}{d{Db}}}l}{{{d{Db}}{d{fn}}}A`}0{cc{}}{{}c{}}{dc{}}{dDd}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Df}}}Df}{{d{d{fc}}}b{}}{{dj}b}{{}Df}{{{d{Df}}{d{Df}}}l}{{{d{Df}}{d{fn}}}A`}>=<:98`{{{d{Ef}}}l}{{{d{Eh}}}l}0{{{d{Ef}}}{{Bd{Ed}}}}{{{d{Ef}}}Ed}{{{Bd{Ed}}}{{Ab{AfAl}}}}```{BfDd}{{Bf{d{{Ej{Ed}}}}}{{Ab{{Aj{BfAf}}Al}}}}1{{Bf{Bd{Ed}}Af}{{Ab{AfAl}}}}{{{d{Ed}}}Cl}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{AlDd}{{{d{Al}}{d{fn}}}A`}{cc{}}{{}c{}}{DdAl}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}","D":"I`","p":[[1,"unit"],[1,"reference",null,null,1],[0,"mut"],[6,"AstNodeType",18],[1,"u8"],[1,"bool"],[5,"Formatter",421],[8,"Result",421],[6,"Result",422,null,1],[5,"TypeId",423],[5,"MathPotatoAstTree",36],[5,"Uuid",424],[1,"tuple",null,null,1],[5,"ParseError",410],[6,"Option",425,null,1],[5,"I32AstNode",118],[5,"InfixAstNodeInternal",261],[5,"Vec",426],[1,"usize"],[5,"I32AstTree",95],[5,"InfixOperationAstTree",135],[10,"ContinuationNodeApi",79],[10,"I32ApiGetNodeById",81],[10,"I32ApiNodeCount",83],[10,"I32ApiPutNode",85],[10,"I32ApiUpdateNode",87],[10,"RootNodeApi",89],[5,"I32AstNodeInternal",220],[5,"HashMap",427],[1,"i32"],[6,"InfixOperationType",156],[5,"IntegerStatementAstNode",171],[6,"PotatoTokenTypes",350],[5,"String",428],[6,"VariableState",377],[5,"IntegerValueExpressionAstNode",191],[10,"TypedAstTreeGetKeys",216],[10,"TypedAstTreeLen",216],[5,"I32AstTree",238],[6,"PotatoAstNode",296],[6,"PotatoAstNodeKind",296],[5,"PotatoToken",334],[1,"str"],[1,"char"],[1,"slice"],[10,"PotatoAstNodeGUID",296]],"r":[],"b":[[368,"impl-Display-for-PotatoTokenTypes"],[369,"impl-Debug-for-PotatoTokenTypes"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAF0BLgABABEAFAAKACEAAwAmAAgAMAAEADYABQA+AAAAQgAEAEkACQBUAAAAWwABAF4ACABoAAIAbAAKAHgAAgB8AAEAfwAPAJAAAQCTABIAqAADAK0ABwC2AAAAuAAHAMEABwDKAAAAzAAMANsAAQDeAAUA5gAPAPcAAgD7AA4ACwEDABABAwAVAQsAIgEGADABEQBEAQAARwEHAFABBgBaAQAAXAEWAHUBEACIAQ4AmAEAAJoBBQCiAQMA","P":[[22,"T"],[24,""],[25,"T"],[26,""],[30,"T"],[31,"U"],[32,"T"],[33,"U,T"],[34,"U"],[35,""],[38,"T"],[40,""],[41,"T"],[42,""],[46,"T"],[47,""],[62,"U"],[63,""],[72,"T"],[73,"U,T"],[74,"U"],[75,""],[96,"T"],[98,""],[99,"T"],[100,""],[102,"T"],[103,""],[106,"U"],[107,""],[112,"T"],[113,""],[114,"U,T"],[115,"U"],[116,""],[119,"T"],[121,""],[122,"T"],[123,""],[125,"U"],[126,""],[131,"U,T"],[132,"U"],[133,""],[136,"T"],[138,""],[139,"T"],[140,""],[142,"T"],[143,""],[145,"U"],[146,""],[150,"T"],[151,""],[152,"U,T"],[153,"U"],[154,""],[158,"T"],[160,""],[161,"T"],[162,""],[165,"T"],[166,"U"],[167,"T"],[168,"U,T"],[169,"U"],[170,""],[172,"T"],[174,""],[175,"T"],[176,""],[180,"T"],[181,""],[182,"U"],[183,"T"],[184,""],[185,"U,T"],[186,"U"],[187,""],[192,"T"],[194,""],[195,"T"],[196,""],[200,"T"],[201,""],[202,"U"],[203,""],[207,"T"],[208,"U,T"],[209,"U"],[210,""],[221,"T"],[223,""],[224,"T"],[225,""],[227,"T"],[228,"U"],[229,""],[233,"T"],[234,"U,T"],[235,"U"],[236,""],[239,"T"],[241,""],[242,"T"],[243,""],[245,"T"],[246,""],[249,"U"],[250,""],[255,"T"],[256,""],[257,"U,T"],[258,"U"],[259,""],[263,"T"],[265,""],[267,"T"],[268,""],[270,"T"],[271,""],[275,"U"],[276,""],[284,"T"],[285,"U,T"],[286,"U"],[287,""],[305,"T"],[309,""],[311,"T"],[313,""],[321,"T"],[323,""],[324,"U"],[326,"T"],[328,"U,T"],[330,"U"],[332,""],[335,"T"],[337,""],[338,"T"],[339,""],[342,"T"],[343,"U"],[344,""],[345,"T"],[346,""],[347,"U,T"],[348,"U"],[349,""],[361,"T"],[363,""],[364,"T"],[365,""],[370,"T"],[371,"U"],[372,"T"],[373,""],[374,"U,T"],[375,"U"],[376,""],[381,"T"],[383,""],[384,"T"],[385,""],[389,"T"],[390,"U"],[391,"T"],[392,"U,T"],[393,"U"],[394,""],[411,"T"],[413,""],[415,"T"],[416,"U"],[417,""],[418,"U,T"],[419,"U"],[420,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[15000]}