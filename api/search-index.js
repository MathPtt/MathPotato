var searchIndex = new Map(JSON.parse('[["MathPotato",{"t":"CHCCCHHHHHHCCCHHHHHFNNONNNNNNNCCCCCCCCCCCCCCCGPPPNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNONONNOONNNNNOONNNNNNKKMMFNNOONNNNNNNNOONNNNOFNNNNNNNNNNNNNNNNNNONNNFNNNNNNNNNNNNNNNNOONOOONNNNFNNNNNNNNNNNNNNNONNNNPGNNNNNNNNNNNNNFNNNNNNNNNONNONNNOOOFNNNNNNNNNONNNNONNNNOSSSSSSSSPPPPPPGKGNNNNNNNNNNNNNNNNNNMNNNNNNNNNNFNNNNNNNNNONONNNPPPPPPGPPPPNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNN","n":["lexer","main","parser","types","lexer","is_integer_value","is_token_semicolon","is_token_whitespace","lexing","tokenize","parse","parse_i32_statement","parse_i32_statement_expression","parser_error","create_error_message","parse_i32_statement","error_message","parse_i32_statement_expression","parse_literal_to_i32","ParseError","borrow","borrow_mut","details","fmt","from","into","new","try_from","try_into","type_id","ast_node_types_enum","ast_tree","ast_tree_traits","i32_ast_node","i32_ast_tree","infix_operation_ast_node","infix_operation_ast_tree","infix_operation_enum","integer_statement_ast_node","integer_value_expression_ast_node","patterns","potato_ast_node","potato_token","potato_token_types","variable_state_enum","AstNodeType","I32AstNode","InfixOperationAstNode","None","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","MathPotatoAstTree","add_root_node","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","fmt","from","get_continuation_node_id_and_type","get_i32_node","get_infix_node_by_id","get_infix_nodes","get_root_node_id","get_root_node_infix","get_root_node_type","i32_tree","i32_tree_len","infix_operation_tree","infix_tree_len","into","last_changed_node_id","last_changed_node_type","merge","new","overwrite_i32_node","put_i32_ast_node","put_infix_node","root_node_id","root_node_type","to_owned","try_from","try_into","type_id","update_infix_node_by_id","update_root_node_id_and_type","TypedAstTreeGetKeys","TypedAstTreeLen","keys","len","I32AstNode","borrow","borrow_mut","child_id","child_type","clone","clone_into","clone_to_uninit","fmt","from","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_owned","try_from","try_into","type_id","value","I32AstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get_node_by_id","get_nodes","get_tree_count","into","keys","len","new","overwrite","put","put_all","to_owned","tree","try_from","try_into","type_id","InfixOperationAstNode","add_i32node_to_the_right","borrow","borrow_mut","check_if_left_empty_right_occupied","clone","clone_into","clone_to_uninit","fmt","from","get_left_node_id_and_type","get_operation_type","get_right_node","get_right_node_id_and_type","into","is_left_occupied","is_right_occupied","left_id","left_type","new_with_type_and_left_child_node","operation_type","right_id","right_type","to_owned","try_from","try_into","type_id","InfixOperationAstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get","get_all","into","keys","len","new","put","to_owned","tree","try_from","try_into","type_id","update","Addition","InfixOperationType","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","to_owned","try_from","try_into","type_id","IntegerStatementAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","to_owned","token_type","try_from","try_into","type_id","variable_name","variable_state","variable_value","IntegerValueExpressionAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","new_with_guid_and_value","new_with_value","new_with_value_and_parent","parent","to_owned","try_from","try_into","type_id","value","KEYWORD_I32","SIGN_ADDITION","SIGN_ASSIGNMENT","SIGN_CLOSE_PARENTHESES","SIGN_DIVISION","SIGN_OPEN_PARENTHESES","SIGN_SEMICOLON","WHITESPACE","IntegerStatementAstNode","","IntegerValueExpressionAstNode","","None","","PotatoAstNode","PotatoAstNodeGUID","PotatoAstNodeKind","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","eq","","fmt","","from","","get_uuid","into","","to_owned","","try_from","","try_into","","type_id","","PotatoToken","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","literal_value","to_owned","token_type","try_from","try_into","type_id","KeywordI32","LiteralIntegerValue","LiteralValueVariableIdentifier","None","OperationAddition","OperationDivision","PotatoTokenTypes","SignAssignment","SignCloseParentheses","SignOpenParentheses","SignSemicolon","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","","from","into","to_owned","to_string","try_from","try_into","type_id","Default","Final","Processing","VariableState","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":[[0,"MathPotato"],[4,"MathPotato::lexer"],[5,"MathPotato::lexer::lexer"],[10,"MathPotato::parser"],[14,"MathPotato::parser::parse_i32_statement"],[16,"MathPotato::parser::parse_i32_statement_expression"],[19,"MathPotato::parser::parser_error"],[30,"MathPotato::types"],[45,"MathPotato::types::ast_node_types_enum"],[63,"MathPotato::types::ast_tree"],[100,"MathPotato::types::ast_tree_traits"],[104,"MathPotato::types::i32_ast_node"],[124,"MathPotato::types::i32_ast_tree"],[147,"MathPotato::types::infix_operation_ast_node"],[174,"MathPotato::types::infix_operation_ast_tree"],[195,"MathPotato::types::infix_operation_enum"],[210,"MathPotato::types::integer_statement_ast_node"],[230,"MathPotato::types::integer_value_expression_ast_node"],[251,"MathPotato::types::patterns"],[259,"MathPotato::types::potato_ast_node"],[297,"MathPotato::types::potato_token"],[313,"MathPotato::types::potato_token_types"],[340,"MathPotato::types::variable_state_enum"],[358,"alloc::vec"],[359,"core::result"],[360,"alloc::string"],[361,"core::fmt"],[362,"core::any"],[363,"uuid"],[364,"core::option"],[365,"std::collections::hash::map"]],"i":"````````````````````Ab000000000````````````````Bh0000000000000000`A`00000000000000000000000000000000000``ChCj`C`000000000000000000`Cd000000000000000000000`Cb0000000000000000000000000`Cf0000000000000000000Cn`0000000000000`D`000000000000000000`Df0000000000000000000````````DhDj1010```101010101010101010Dl2121212121`l00000000000000Db00000`00000000000000000000Dd00`00000000000000","f":"`{{}b}```{{{f{d}}}h}{{{f{j}}}h}0{{{f{d}}}{{n{l}}}}{{{f{d}}}l}{{{n{l}}}{{Ad{A`Ab}}}}```{AfAh}{{Af{f{{Aj{l}}}}}{{Ad{{Al{AfA`}}Ab}}}}1{{Af{n{l}}A`}{{Ad{A`Ab}}}}{{{f{l}}}An}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{AbAh}{{{f{Ab}}{f{B`Bb}}}Bd}{cc{}}{{}c{}}{AhAb}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}```````````````````98{{{f{Bh}}}Bh}{{f{f{B`c}}}b{}}{{fBj}b}{{}Bh}{{{f{Bh}}{f{Bh}}}h}{{{f{Bh}}{f{B`Bb}}}Bd};:{fc{}}987`{{{f{B`A`}}BlBh}{{Ad{{Al{BlBh}}Ab}}}}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{A`}}}A`}98{{}A`}{{{f{A`}}{f{B`Bb}}}Bd}{cc{}}{{{f{A`}}}{{Bn{{Al{BlBh}}}}}}{{{f{A`}}Bl}{{Bn{C`}}}}{{{f{A`}}Bl}{{Bn{{Al{BlCb}}}}}}{{{f{A`}}}{{Ad{{n{{Al{BlCb}}}}Ab}}}}{{{f{A`}}}{{Bn{Bl}}}}{{{f{A`}}Bl}{{Ad{{Al{BlCb}}Ab}}}}{{{f{A`}}}Bh}{A`Cd}{{{f{A`}}}Af}{A`Cf}1{{}c{}}{A`Bl}{A`Bh}{{{f{B`A`}}A`}{{Ad{bAb}}}}{{}A`}{{{f{B`A`}}BlC`}{{Ad{{Al{BlC`}}Ab}}}}{{{f{B`A`}}C`}{{Ad{{Al{BlC`}}Ab}}}}{{{f{B`A`}}Cb}{{Ad{{Al{BlCb}}Ab}}}}65{fc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}{{{f{B`A`}}BlCb}{{Ad{{Al{BlCb}}Ab}}}}{{{f{B`A`}}BlBh}{{Ad{{Al{BlBh}}Ab}}}}``{Ch{{n{Bl}}}}{{{f{Cj}}}Af}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{C`Bl}{C`Bh}{{{f{C`}}}C`}{{f{f{B`c}}}b{}}{{fBj}b}{{{f{C`}}{f{B`Bb}}}Bd}{cc{}}{{}c{}}{{AnBhBl}C`}{AnC`}98{fc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}{C`An}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Cd}}}Cd}>={{{f{Cd}}{f{B`Bb}}}Bd}<{{{f{Cd}}Bl}{{Bn{C`}}}}{{{f{Cd}}{n{Bl}}}{{Bn{{Cl{BlC`}}}}}}{{{f{Cd}}}Af}>{Cd{{n{Bl}}}}1{{}Cd}{{{f{B`Cd}}BlC`}{{Ad{{Al{BlC`}}Ab}}}}0{{{f{B`Cd}}{Cl{BlC`}}}b}?{CdCl}?>=`{{{f{B`Cb}}Bl}{{Ad{{Al{BlCb}}Ab}}}}<;{{{f{Cb}}}{{Ad{bAb}}}}{{{f{Cb}}}Cb}{{f{f{B`c}}}b{}}{{fBj}b}{{{f{Cb}}{f{B`Bb}}}Bd}{cc{}}{{{f{Cb}}}{{Bn{{Al{BlBh}}}}}}{{{f{Cb}}}Cn}11{{}c{}}{{{f{Cb}}}h}0{CbBl}{CbBh}{{CnBhBl}Cb}{CbCn}32{fc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Cf}}}Cf}{{f{f{B`c}}}b{}}{{fBj}b}{{{f{Cf}}{f{B`Bb}}}Bd}{cc{}}{{{f{Cf}}Bl}{{Bn{Cb}}}}{{{f{Cf}}}{{Ad{{n{{Al{BlCb}}}}Ab}}}}{{}c{}}{Cf{{n{Bl}}}}{{{f{Cf}}}Af}{{}Cf}{{{f{B`Cf}}BlCb}{{Ad{{Al{BlCb}}Ab}}}}{fc{}}{CfCl}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}5``{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Cn}}}Cn}{{f{f{B`c}}}b{}}{{fBj}b}{{{f{Cn}}{f{Cn}}}h}{{{f{Cn}}{f{B`Bb}}}Bd}{cc{}}{{}c{}}=;:9`87{{{f{D`}}}D`}65{{}D`}{{{f{D`}}{f{D`}}}h}{{{f{D`}}{f{B`Bb}}}Bd}5{D`Bl}5{fc{}}{D`Db}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}{D`Ah}{D`Dd}{D`An}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Df}}}Df}{{f{f{B`c}}}b{}}{{fBj}b}{{}Df}{{{f{Df}}{f{Df}}}h}{{{f{Df}}{f{B`Bb}}}Bd}{cc{}}{DfBl}{{}c{}}{{BlAn}Df}{AnDf}{{AnBl}Df}4{fc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}{DfAn}{{}f}0000000`````````{f{{f{c}}}{}}0{{{f{B`}}}{{f{B`c}}}{}}0{{{f{Dh}}}Dh}{{{f{Dj}}}Dj}{{f{f{B`c}}}b{}}0{{fBj}b}0{{}Dh}{{}Dj}{{{f{Dh}}{f{Dh}}}h}{{{f{Dj}}{f{Dj}}}h}{{{f{Dh}}{f{B`Bb}}}Bd}{{{f{Dj}}{f{B`Bb}}}Bd}{cc{}}0{{}b}{{}c{}}0{fc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{fBf}0`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{l}}}l}{{f{f{B`c}}}b{}}{{fBj}b}{{{f{l}}{f{l}}}h}{{{f{l}}{f{B`Bb}}}Bd}=;{lAh};{lDb};:9```````````87{{{f{Db}}}Db}65{{}Db}{{{f{Db}}{f{Db}}}h}{{{f{Db}}{f{B`Bb}}}Bd}0{cc{}}{{}c{}}{fc{}}{fAh}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}````{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Dd}}}Dd}{{f{f{B`c}}}b{}}{{fBj}b}{{}Dd}{{{f{Dd}}{f{Dd}}}h}{{{f{Dd}}{f{B`Bb}}}Bd}>=<:98","D":"Fj","p":[[1,"unit"],[1,"str"],[1,"reference",null,null,1],[1,"bool"],[1,"char"],[5,"PotatoToken",297],[5,"Vec",358],[5,"MathPotatoAstTree",63],[5,"ParseError",19],[6,"Result",359,null,1],[1,"usize"],[5,"String",360],[1,"slice"],[1,"tuple",null,null,1],[1,"i32"],[0,"mut"],[5,"Formatter",361],[8,"Result",361],[5,"TypeId",362],[6,"AstNodeType",45],[1,"u8"],[5,"Uuid",363],[6,"Option",364,null,1],[5,"I32AstNode",104],[5,"InfixOperationAstNode",147],[5,"I32AstTree",124],[5,"InfixOperationAstTree",174],[10,"TypedAstTreeGetKeys",100],[10,"TypedAstTreeLen",100],[5,"HashMap",365],[6,"InfixOperationType",195],[5,"IntegerStatementAstNode",210],[6,"PotatoTokenTypes",313],[6,"VariableState",340],[5,"IntegerValueExpressionAstNode",230],[6,"PotatoAstNode",259],[6,"PotatoAstNodeKind",259],[10,"PotatoAstNodeGUID",259]],"r":[],"b":[[331,"impl-Debug-for-PotatoTokenTypes"],[332,"impl-Display-for-PotatoTokenTypes"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADEBJAABAA4AEQAAABMABQAbABIALwAKADwADABKAAQAUAAEAFYABABcAAgAZwABAGoABwB0AA8AhQACAIkADgCZAAMAngADAKMAEgC3AAEAugASAM8AAwDUAAcA3QAAAN8ABwDoAAcA8QAAAPMACAD9AAYACwERAB8BAAAiAQcAKwEGADUBAAA3ARYAUAEQAGMBAwA=","P":[[20,"T"],[22,""],[24,"T"],[25,"U"],[26,""],[27,"U,T"],[28,"U"],[29,""],[49,"T"],[51,""],[52,"T"],[53,""],[57,"T"],[58,"U"],[59,"T"],[60,"U,T"],[61,"U"],[62,""],[65,"T"],[67,""],[68,"T"],[69,""],[72,"T"],[73,""],[84,"U"],[85,""],[94,"T"],[95,"U,T"],[96,"U"],[97,""],[105,"T"],[107,""],[110,"T"],[111,""],[113,"T"],[114,"U"],[115,""],[119,"T"],[120,"U,T"],[121,"U"],[122,""],[125,"T"],[127,""],[128,"T"],[129,""],[131,"T"],[132,""],[135,"U"],[136,""],[142,"T"],[143,""],[144,"U,T"],[145,"U"],[146,""],[149,"T"],[151,""],[153,"T"],[154,""],[156,"T"],[157,""],[161,"U"],[162,""],[170,"T"],[171,"U,T"],[172,"U"],[173,""],[175,"T"],[177,""],[178,"T"],[179,""],[181,"T"],[182,""],[184,"U"],[185,""],[189,"T"],[190,""],[191,"U,T"],[192,"U"],[193,""],[197,"T"],[199,""],[200,"T"],[201,""],[204,"T"],[205,"U"],[206,"T"],[207,"U,T"],[208,"U"],[209,""],[211,"T"],[213,""],[214,"T"],[215,""],[219,"T"],[220,""],[221,"U"],[222,"T"],[223,""],[224,"U,T"],[225,"U"],[226,""],[231,"T"],[233,""],[234,"T"],[235,""],[239,"T"],[240,""],[241,"U"],[242,""],[246,"T"],[247,"U,T"],[248,"U"],[249,""],[268,"T"],[272,""],[274,"T"],[276,""],[284,"T"],[286,""],[287,"U"],[289,"T"],[291,"U,T"],[293,"U"],[295,""],[298,"T"],[300,""],[301,"T"],[302,""],[305,"T"],[306,"U"],[307,""],[308,"T"],[309,""],[310,"U,T"],[311,"U"],[312,""],[324,"T"],[326,""],[327,"T"],[328,""],[333,"T"],[334,"U"],[335,"T"],[336,""],[337,"U,T"],[338,"U"],[339,""],[344,"T"],[346,""],[347,"T"],[348,""],[352,"T"],[353,"U"],[354,"T"],[355,"U,T"],[356,"U"],[357,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[12292]}