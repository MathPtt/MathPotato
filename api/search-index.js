var searchIndex = new Map(JSON.parse('[["MathPotato",{"t":"CHCCCHHHHHHCCCHHHHHFNNONNNNNNNCCCCCCCCCFFNNNNNNNNNNNNNNNNNONNONNONNNNNNFNNNNNNONNNNOONNNFNNNNNNNNNONNONNNOOOFNNNNNNNNNONNNNONNNNOSSSSSSSSPPPGKNNNNNNNNNMNNNNNFNNNNNNNNNONONNNPPPPPPGPPPPNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNN","n":["lexer","main","parser","types","lexer","is_integer_value","is_token_semicolon","is_token_whitespace","lexing","tokenize","parse","parse_integer_statement","parse_integer_statement_expression","parser_error","create_error_message","parse_integer_statement","error_message","parse_integer_statement_expression","parse_literal_to_i32","PotatoParserError","borrow","borrow_mut","details","fmt","from","into","new","try_from","try_into","type_id","ast_tree","infix_expression_node","integer_statement_ast_node","integer_value_expression_ast_node","patterns","potato_ast_node","potato_token","potato_token_types","variable_state_enum","PotatoAstTree","PotatoAstTreeError","add_node","add_node_as_last_modified","borrow","","borrow_mut","","clean_last_modified","default","fmt","from","","get","get_last_modified_clone","get_nodes","into","","is_empty","last_changed","len","merge","message","new","","tree","try_from","","try_into","","type_id","","InfixExpressionAstNode","borrow","borrow_mut","eq","fmt","from","into","left","new","new_with_left","new_with_right","new_with_token_type","right","token_type","try_from","try_into","type_id","IntegerStatementAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","to_owned","token_type","try_from","try_into","type_id","variable_name","variable_state","variable_value","IntegerValueExpressionAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","new_with_guid_and_value","new_with_value","new_with_value_and_parent","parent","to_owned","try_from","try_into","type_id","value","KEYWORD_INTEGER","SIGN_ADDITION","SIGN_ASSIGNMENT","SIGN_CLOSE_PARENTHESES","SIGN_DIVISION","SIGN_OPEN_PARENTHESES","SIGN_SEMICOLON","WHITESPACE","IntegerStatementAstNode","IntegerValueExpressionAstNode","None","PotatoAstNode","PotatoAstNodeGUID","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","get_uuid","into","to_owned","try_from","try_into","type_id","PotatoToken","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","literal_value","to_owned","token_type","try_from","try_into","type_id","KeywordInteger","LiteralIntegerValue","LiteralValueVariableIdentifier","None","OperationAddition","OperationDivision","PotatoTokenTypes","SignAssignment","SignCloseParentheses","SignOpenParentheses","SignSemicolon","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","","from","into","to_owned","to_string","try_from","try_into","type_id","Default","Final","Processing","VariableState","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":[[0,"MathPotato"],[4,"MathPotato::lexer"],[5,"MathPotato::lexer::lexer"],[10,"MathPotato::parser"],[14,"MathPotato::parser::parse_integer_statement"],[16,"MathPotato::parser::parse_integer_statement_expression"],[19,"MathPotato::parser::parser_error"],[30,"MathPotato::types"],[39,"MathPotato::types::ast_tree"],[71,"MathPotato::types::infix_expression_node"],[88,"MathPotato::types::integer_statement_ast_node"],[108,"MathPotato::types::integer_value_expression_ast_node"],[129,"MathPotato::types::patterns"],[137,"MathPotato::types::potato_ast_node"],[157,"MathPotato::types::potato_token"],[173,"MathPotato::types::potato_token_types"],[200,"MathPotato::types::variable_state_enum"],[218,"alloc::vec"],[219,"core::result"],[220,"alloc::string"],[221,"core::fmt"],[222,"core::any"],[223,"uuid"],[224,"std::collections::hash::map"],[225,"core::option"]],"i":"````````````````````Ab000000000```````````A`00Bj10110101111011110101101010`Cb000000000000000`Cf000000000000000000`Cl0000000000000000000````````Bh00``000000000Cn11111`l00000000000000Cd00000`00000000000000000000Cj00`00000000000000","f":"`{{}b}```{{{f{d}}}h}{{{f{j}}}h}0{{{f{d}}}{{n{l}}}}{{{f{d}}}l}{{{n{l}}}{{Ad{A`Ab}}}}```{AfAh}{{Af{f{{Aj{l}}}}}{{Ad{{Al{AfA`}}Ab}}}}1{{Af{n{l}}A`}{{Ad{A`Ab}}}}{{{f{l}}}An}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{AbAh}{{{f{Ab}}{f{B`Bb}}}Bd}{cc{}}{{}c{}}{AhAb}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}```````````{{{f{B`A`}}Bh}{{Ad{bBj}}}}{{{f{B`A`}}BlBh}{{Ad{bBj}}}};;::{{{f{B`A`}}}b}{{}A`}{{{f{Bj}}{f{B`Bb}}}Bd}::{{A`Bl}{{Ad{BhBj}}}}{{{f{A`}}}{{Ad{BhBj}}}}{A`{{Bn{BlBh}}}}<<{{{f{A`}}}h}{A`C`}{{{f{A`}}}Af}{{{f{B`A`}}{Bn{BlBh}}}{{Ad{bBj}}}}{BjAh}9{AhBj}{A`Bn}{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{fBf}0`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Cb}}{f{Cb}}}h}{{{f{Cb}}{f{B`Bb}}}Bd}{cc{}}{{}c{}}{CbBl}{{CdBlBl}Cb}{{CdBl}Cb}0{CdCb}3{CbCd}=<;`:9{{{f{Cf}}}Cf}{{f{f{B`c}}}b{}}{{fCh}b}{{}Cf}{{{f{Cf}}{f{Cf}}}h}{{{f{Cf}}{f{B`Bb}}}Bd}<{CfBl}<{fc{}}{CfCd}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}{CfAh}{CfCj}{CfAn}`{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Cl}}}Cl}{{f{f{B`c}}}b{}}{{fCh}b}{{}Cl}{{{f{Cl}}{f{Cl}}}h}{{{f{Cl}}{f{B`Bb}}}Bd}{cc{}}{ClBl}{{}c{}}{{BlAn}Cl}{AnCl}{{AnBl}Cl}4{fc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}{ClAn}{{}f}0000000`````{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Bh}}}Bh}{{f{f{B`c}}}b{}}{{fCh}b}{{}Bh}{{{f{Bh}}{f{Bh}}}h}{{{f{Bh}}{f{B`Bb}}}Bd}{cc{}}{{}b}{{}c{}}{fc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}`>={{{f{l}}}l}<;{{{f{l}}{f{l}}}h}{{{f{l}}{f{B`Bb}}}Bd}97{lAh}7{lCd}765```````````{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Cd}}}Cd}{{f{f{B`c}}}b{}}{{fCh}b}{{}Cd}{{{f{Cd}}{f{Cd}}}h}{{{f{Cd}}{f{B`Bb}}}Bd}0{cc{}}{{}c{}}{fc{}}{fAh}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{fBf}````>={{{f{Cj}}}Cj}<;{{}Cj}{{{f{Cj}}{f{Cj}}}h}{{{f{Cj}}{f{B`Bb}}}Bd}:98654","D":"Dd","p":[[1,"unit"],[1,"str"],[1,"reference",null,null,1],[1,"bool"],[1,"char"],[5,"PotatoToken",157],[5,"Vec",218],[5,"PotatoAstTree",39],[5,"PotatoParserError",19],[6,"Result",219,null,1],[1,"usize"],[5,"String",220],[1,"slice"],[1,"tuple",null,null,1],[1,"i32"],[0,"mut"],[5,"Formatter",221],[8,"Result",221],[5,"TypeId",222],[6,"PotatoAstNode",137],[5,"PotatoAstTreeError",39],[5,"Uuid",223],[5,"HashMap",224],[6,"Option",225,null,1],[5,"InfixExpressionAstNode",71],[6,"PotatoTokenTypes",173],[5,"IntegerStatementAstNode",88],[1,"u8"],[6,"VariableState",200],[5,"IntegerValueExpressionAstNode",108],[10,"PotatoAstNodeGUID",137]],"r":[],"b":[[191,"impl-Display-for-PotatoTokenTypes"],[192,"impl-Debug-for-PotatoTokenTypes"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALgAFgAAAA8AEQAAABMABQAbABcANQAAADoADQBJAAMATwAJAFoABwBjAAAAZQAHAG4ABwB3AAAAeQAQAI4ACACYAAAAmgADAJ8ABgCpAAAAqwAWAMQAEADXAAMA","P":[[20,"T"],[22,""],[24,"T"],[25,"U"],[26,""],[27,"U,T"],[28,"U"],[29,""],[43,"T"],[47,""],[50,"T"],[52,""],[55,"U"],[57,""],[65,"U,T"],[67,"U"],[69,""],[72,"T"],[74,""],[76,"T"],[77,"U"],[78,""],[85,"U,T"],[86,"U"],[87,""],[89,"T"],[91,""],[92,"T"],[93,""],[97,"T"],[98,""],[99,"U"],[100,"T"],[101,""],[102,"U,T"],[103,"U"],[104,""],[109,"T"],[111,""],[112,"T"],[113,""],[117,"T"],[118,""],[119,"U"],[120,""],[124,"T"],[125,"U,T"],[126,"U"],[127,""],[142,"T"],[144,""],[145,"T"],[146,""],[150,"T"],[151,""],[152,"U"],[153,"T"],[154,"U,T"],[155,"U"],[156,""],[158,"T"],[160,""],[161,"T"],[162,""],[165,"T"],[166,"U"],[167,""],[168,"T"],[169,""],[170,"U,T"],[171,"U"],[172,""],[184,"T"],[186,""],[187,"T"],[188,""],[193,"T"],[194,"U"],[195,"T"],[196,""],[197,"U,T"],[198,"U"],[199,""],[204,"T"],[206,""],[207,"T"],[208,""],[212,"T"],[213,"U"],[214,"T"],[215,"U,T"],[216,"U"],[217,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[7519]}