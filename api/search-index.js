var searchIndex = new Map(JSON.parse('[["MathPotato",{"t":"CCHCCCCCCCCCCCCCCCGPPPNNNNNNNNNNNNNNFNNNNNNCCNNNNNNNNNNCCCCCNOONNOONNNNCOONNNNNNNKKMKKMKMKMKMKMMMMMFNNNNNNNNNNNNNNNNNONNNNFNNNNNONNNOONNNNOFNNNNNNNNNNNNNNNONNNNPGNNNNNNNNNNNNNFNNNNNNNNNONNONNNOOOFNNNNNNNNNONNNNONNNNOCCCCKKMMFNNNNNNNNNNOONNNNOFNNNNNNNNNNNNNNNNNONNNNFNNNNNNNNNNNNNNNNOONOOONNNNSSSSSSSSPPPPPPGKGNNNNNNNNNNNNNNNNNNMNNNNNNNNNNFNNNNNNNNNONONNNPPPPPPGPPPPNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNCHHHHHHCCCHHHHHFNNONNNNNNN","n":["ast","lexer","main","parser","ast_node_types_enum","ast_tree","i32_ast_tree","i32_node","infix_operation_ast_tree","infix_operation_enum","integer_statement_ast_node","integer_value_expression_ast_node","internal","patterns","potato_ast_node","potato_token","potato_token_types","variable_state_enum","AstNodeType","I32AstNode","InfixOperationAstNode","None","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","MathPotatoAstTree","add_root_node_id_and_type","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cont_node_api","cont_node_api_get_id_and_type","default","fmt","from","get_continuation_node_id_and_type","get_i32_node_by_id","get_infix_node_by_id","get_infix_nodes","get_root_node_id","get_root_node_infix","get_root_node_type","i32_api","i32_api_get_node_by_id","i32_api_node_count","i32_api_put_node","i32_api_update_node","i32_node_count","i32_tree","infix_operation_tree","infix_tree_len","into","last_changed_node_id","last_changed_node_type","merge","new","put_i32_ast_node","put_infix_node","root_node_api","root_node_id","root_node_type","to_owned","try_from","try_into","type_id","update_i32_node","update_infix_node_by_id","update_root_node_id_and_type","ContNodeApi","ContNodeApiGetIdAndType","get_continuation_node_id_and_type","I32Api","I32ApiGetNodeById","get_i32_node_by_id","I32ApiNodeCount","i32_node_count","I32ApiPutNode","put_i32_ast_node","I32ApiUpdateNode","update_i32_node","RootNodeApi","add_root_node_id_and_type","get_root_node_id","get_root_node_infix","get_root_node_type","update_root_node_id_and_type","I32AstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get_node_by_id","get_nodes","get_tree_count","into","keys","len","new","put","put_all","to_owned","tree","try_from","try_into","type_id","update","I32AstNode","borrow","borrow_mut","fmt","from","from_internal_and_id","id","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_internal","try_from","try_into","type_id","value","InfixOperationAstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get","get_all","into","keys","len","new","put","to_owned","tree","try_from","try_into","type_id","update","Addition","InfixOperationType","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","to_owned","try_from","try_into","type_id","IntegerStatementAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","to_owned","token_type","try_from","try_into","type_id","variable_name","variable_state","variable_value","IntegerValueExpressionAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","new_with_guid_and_value","new_with_value","new_with_value_and_parent","parent","to_owned","try_from","try_into","type_id","value","ast_tree_traits","i32_ast_node_internal","i32_ast_tree","infix_operation_ast_node","TypedAstTreeGetKeys","TypedAstTreeLen","keys","len","I32AstNodeInternal","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_owned","try_from","try_into","type_id","value","I32AstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get_node_by_id","get_nodes","get_tree_count","into","keys","len","new","put","put_all","to_owned","tree","try_from","try_into","type_id","update","InfixAstNodeInternal","add_i32node_to_the_right","borrow","borrow_mut","check_if_left_empty_right_occupied","clone","clone_into","clone_to_uninit","fmt","from","get_left_node_id_and_type","get_operation_type","get_right_node","get_right_node_id_and_type","into","is_left_occupied","is_right_occupied","left_id","left_type","new_with_type_and_left_child_node","operation_type","right_id","right_type","to_owned","try_from","try_into","type_id","KEYWORD_I32","SIGN_ADDITION","SIGN_ASSIGNMENT","SIGN_CLOSE_PARENTHESES","SIGN_DIVISION","SIGN_OPEN_PARENTHESES","SIGN_SEMICOLON","WHITESPACE","IntegerStatementAstNode","","IntegerValueExpressionAstNode","","None","","PotatoAstNode","PotatoAstNodeGUID","PotatoAstNodeKind","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","eq","","fmt","","from","","get_uuid","into","","to_owned","","try_from","","try_into","","type_id","","PotatoToken","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","literal_value","to_owned","token_type","try_from","try_into","type_id","KeywordI32","LiteralIntegerValue","LiteralValueVariableIdentifier","None","OperationAddition","OperationDivision","PotatoTokenTypes","SignAssignment","SignCloseParentheses","SignOpenParentheses","SignSemicolon","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","","from","into","to_owned","to_string","try_from","try_into","type_id","Default","Final","Processing","VariableState","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","lexer","is_integer_value","is_token_semicolon","is_token_whitespace","lexing","tokenize","parse","parse_i32_statement","parse_i32_statement_expression","parser_error","create_error_message","parse_i32_statement","error_message","parse_i32_statement_expression","parse_literal_to_i32","ParseError","borrow","borrow_mut","details","fmt","from","into","new","try_from","try_into","type_id"],"q":[[0,"MathPotato"],[4,"MathPotato::ast"],[18,"MathPotato::ast::ast_node_types_enum"],[36,"MathPotato::ast::ast_tree"],[81,"MathPotato::ast::ast_tree::cont_node_api"],[82,"MathPotato::ast::ast_tree::cont_node_api_get_id_and_type"],[84,"MathPotato::ast::ast_tree::i32_api"],[85,"MathPotato::ast::ast_tree::i32_api_get_node_by_id"],[87,"MathPotato::ast::ast_tree::i32_api_node_count"],[89,"MathPotato::ast::ast_tree::i32_api_put_node"],[91,"MathPotato::ast::ast_tree::i32_api_update_node"],[93,"MathPotato::ast::ast_tree::root_node_api"],[99,"MathPotato::ast::i32_ast_tree"],[122,"MathPotato::ast::i32_node"],[139,"MathPotato::ast::infix_operation_ast_tree"],[160,"MathPotato::ast::infix_operation_enum"],[175,"MathPotato::ast::integer_statement_ast_node"],[195,"MathPotato::ast::integer_value_expression_ast_node"],[216,"MathPotato::ast::internal"],[220,"MathPotato::ast::internal::ast_tree_traits"],[224,"MathPotato::ast::internal::i32_ast_node_internal"],[242,"MathPotato::ast::internal::i32_ast_tree"],[265,"MathPotato::ast::internal::infix_operation_ast_node"],[292,"MathPotato::ast::patterns"],[300,"MathPotato::ast::potato_ast_node"],[338,"MathPotato::ast::potato_token"],[354,"MathPotato::ast::potato_token_types"],[381,"MathPotato::ast::variable_state_enum"],[399,"MathPotato::lexer"],[400,"MathPotato::lexer::lexer"],[405,"MathPotato::parser"],[409,"MathPotato::parser::parse_i32_statement"],[411,"MathPotato::parser::parse_i32_statement_expression"],[414,"MathPotato::parser::parser_error"],[425,"core::fmt"],[426,"core::result"],[427,"core::any"],[428,"uuid"],[429,"core::option"],[430,"alloc::vec"],[431,"std::collections::hash::map"],[432,"alloc::string"]],"i":"```````````````````h0000000000000000`Af00000``0000000000`````00000000000`000000000``Bl``Bn`C``Cb`Cd`Cf0000`Bh000000000000000000000`B`000000000000000`Bj0000000000000000000Cn`0000000000000`D`000000000000000000`Dh0000000000000000000``````DjDl`Ch0000000000000000`Dn000000000000000000000`Bb0000000000000000000000000````````E`Eb1010```101010101010101010El2121212121`Ed00000000000000Db00000`00000000000000000000Df00`00000000000000````````````````Al000000000","f":"``{{}b}```````````````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{h}}}h}{{d{d{fc}}}b{}}{{dj}b}{{}h}{{{d{h}}{d{h}}}l}{{{d{h}}{d{fn}}}A`}{cc{}}{{}c{}}{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}`{{{d{fAf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}>={{{d{Af}}}Af}<;``{{}Af}{{{d{Af}}{d{fn}}}A`}9{{{d{Af}}}{{An{{Aj{Ahh}}}}}}{{{d{Af}}Ah}{{Ab{B`Al}}}}{{{d{Af}}Ah}{{An{{Aj{AhBb}}}}}}{{{d{Af}}}{{Ab{{Bd{{Aj{AhBb}}}}Al}}}}{{{d{Af}}}{{An{Ah}}}}{{{d{Af}}Ah}{{Ab{{Aj{AhBb}}Al}}}}{{{d{Af}}}h}`````{{{d{Af}}}Bf}{AfBh}{AfBj}2{{}c{}}{AfAh}{Afh}{{{d{fAf}}Af}{{Ab{bAl}}}}?{{{d{fAf}}B`}{{Ab{B`Al}}}}{{{d{fAf}}Bb}{{Ab{{Aj{AhBb}}Al}}}}`43{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{{{d{fAf}}AhB`}{{Ab{B`Al}}}}{{{d{fAf}}AhBb}{{Ab{{Aj{AhBb}}Al}}}}{{{d{fAf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}``{{{d{Bl}}}{{An{{Aj{Ahh}}}}}}``{{{d{Bn}}Ah}{{Ab{B`Al}}}}`{{{d{C`}}}Bf}`{{{d{fCb}}B`}{{Ab{B`Al}}}}`{{{d{fCd}}AhB`}{{Ab{B`Al}}}}`{{{d{fCf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}{{{d{Cf}}}{{An{Ah}}}}{{{d{Cf}}Ah}{{Ab{{Aj{AhBb}}Al}}}}{{{d{Cf}}}h}3`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bh}}}Bh}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bh}}{d{fn}}}A`}{cc{}}{{{d{Bh}}Ah}{{An{Ch}}}}{{{d{Bh}}{Bd{Ah}}}{{An{{Cj{AhCh}}}}}}{{{d{Bh}}}Bf}{{}c{}}{Bh{{Bd{Ah}}}}2{{}Bh}{{{d{fBh}}AhCh}{{Ab{{Aj{AhCh}}Al}}}}{{{d{fBh}}{Cj{AhCh}}}b}{dc{}}{BhCj}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}6`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{B`}}{d{fn}}}A`}{cc{}}{{ChAh}{{Ab{B`Al}}}}{B`Ah}?{{ClhAh}B`}{ClB`}2{B`h}{{{d{B`}}}{{Ab{ChAl}}}}<;:{B`Cl}`:9{{{d{Bj}}}Bj}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bj}}{d{fn}}}A`};{{{d{Bj}}Ah}{{An{Bb}}}}{{{d{Bj}}}{{Ab{{Bd{{Aj{AhBb}}}}Al}}}}{{}c{}}{Bj{{Bd{Ah}}}}{{{d{Bj}}}Bf}{{}Bj}{{{d{fBj}}AhBb}{{Ab{{Aj{AhBb}}Al}}}}{dc{}}{BjCj}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}5``{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Cn}}}Cn}{{d{d{fc}}}b{}}{{dj}b}{{{d{Cn}}{d{Cn}}}l}{{{d{Cn}}{d{fn}}}A`}{cc{}}{{}c{}}=;:9`87{{{d{D`}}}D`}65{{}D`}{{{d{D`}}{d{D`}}}l}{{{d{D`}}{d{fn}}}A`}5{D`Ah}5{dc{}}{D`Db}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{D`Dd}{D`Df}{D`Cl}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Dh}}}Dh}{{d{d{fc}}}b{}}{{dj}b}{{}Dh}{{{d{Dh}}{d{Dh}}}l}{{{d{Dh}}{d{fn}}}A`}{cc{}}{DhAh}{{}c{}}{{AhCl}Dh}{ClDh}{{ClAh}Dh}4{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{DhCl}``````{Dj{{Bd{Ah}}}}{{{d{Dl}}}Bf}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ch}}}Ch}{{d{d{fc}}}b{}}{{dj}b}{{{d{Ch}}{d{fn}}}A`}{cc{}}{{}c{}}{{ClhAh}Ch}{ClCh}{ChAh}{Chh}{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{ChCl}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Dn}}}Dn}{{d{d{fc}}}b{}}{{dj}b}{{{d{Dn}}{d{fn}}}A`}{cc{}}{{{d{Dn}}Ah}{{An{Ch}}}}{{{d{Dn}}{Bd{Ah}}}{{An{{Cj{AhCh}}}}}}{{{d{Dn}}}Bf}{{}c{}}{Dn{{Bd{Ah}}}}2{{}Dn}{{{d{fDn}}AhCh}{{Ab{{Aj{AhCh}}Al}}}}{{{d{fDn}}{Cj{AhCh}}}b}{dc{}}{DnCj}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}6`{{{d{fBb}}Ah}{{Ab{{Aj{AhBb}}Al}}}}{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bb}}}{{Ab{bAl}}}}{{{d{Bb}}}Bb}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bb}}{d{fn}}}A`}{cc{}}{{{d{Bb}}}{{An{{Aj{Ahh}}}}}}{{{d{Bb}}}Cn}11{{}c{}}{{{d{Bb}}}l}0{BbAh}{Bbh}{{CnhAh}Bb}{BbCn}32{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{{}d}0000000`````````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{E`}}}E`}{{{d{Eb}}}Eb}{{d{d{fc}}}b{}}0{{dj}b}0{{}E`}{{}Eb}{{{d{E`}}{d{E`}}}l}{{{d{Eb}}{d{Eb}}}l}{{{d{E`}}{d{fn}}}A`}{{{d{Eb}}{d{fn}}}A`}{cc{}}0{{}b}{{}c{}}0{dc{}}0{c{{Ab{e}}}{}{}}0{{}{{Ab{c}}}{}}0{dAd}0`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ed}}}Ed}{{d{d{fc}}}b{}}{{dj}b}{{{d{Ed}}{d{Ed}}}l}{{{d{Ed}}{d{fn}}}A`}=;{EdDd};{EdDb};:9```````````87{{{d{Db}}}Db}65{{}Db}{{{d{Db}}{d{Db}}}l}{{{d{Db}}{d{fn}}}A`}0{cc{}}{{}c{}}{dc{}}{dDd}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Df}}}Df}{{d{d{fc}}}b{}}{{dj}b}{{}Df}{{{d{Df}}{d{Df}}}l}{{{d{Df}}{d{fn}}}A`}>=<:98`{{{d{Ef}}}l}{{{d{Eh}}}l}0{{{d{Ef}}}{{Bd{Ed}}}}{{{d{Ef}}}Ed}{{{Bd{Ed}}}{{Ab{AfAl}}}}```{BfDd}{{Bf{d{{Ej{Ed}}}}}{{Ab{{Aj{BfAf}}Al}}}}1{{Bf{Bd{Ed}}Af}{{Ab{AfAl}}}}{{{d{Ed}}}Cl}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{AlDd}{{{d{Al}}{d{fn}}}A`}{cc{}}{{}c{}}{DdAl}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}","D":"Ib","p":[[1,"unit"],[1,"reference",null,null,1],[0,"mut"],[6,"AstNodeType",18],[1,"u8"],[1,"bool"],[5,"Formatter",425],[8,"Result",425],[6,"Result",426,null,1],[5,"TypeId",427],[5,"MathPotatoAstTree",36],[5,"Uuid",428],[1,"tuple",null,null,1],[5,"ParseError",414],[6,"Option",429,null,1],[5,"I32AstNode",122],[5,"InfixAstNodeInternal",265],[5,"Vec",430],[1,"usize"],[5,"I32AstTree",99],[5,"InfixOperationAstTree",139],[10,"ContNodeApiGetIdAndType",82],[10,"I32ApiGetNodeById",85],[10,"I32ApiNodeCount",87],[10,"I32ApiPutNode",89],[10,"I32ApiUpdateNode",91],[10,"RootNodeApi",93],[5,"I32AstNodeInternal",224],[5,"HashMap",431],[1,"i32"],[6,"InfixOperationType",160],[5,"IntegerStatementAstNode",175],[6,"PotatoTokenTypes",354],[5,"String",432],[6,"VariableState",381],[5,"IntegerValueExpressionAstNode",195],[10,"TypedAstTreeGetKeys",220],[10,"TypedAstTreeLen",220],[5,"I32AstTree",242],[6,"PotatoAstNode",300],[6,"PotatoAstNodeKind",300],[5,"PotatoToken",338],[1,"str"],[1,"char"],[1,"slice"],[10,"PotatoAstNodeGUID",300]],"r":[],"b":[[372,"impl-Display-for-PotatoTokenTypes"],[373,"impl-Debug-for-PotatoTokenTypes"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGABMgABABEAFAAKACEAAwAmAAkAMQAEADcABgBAAAAARAAEAEsABgBTAAAAVgAAAFgAAABaAAAAXAAAAF8AAQBiAAgAbAACAHAACgB8AAIAgAABAIMADwCUAAEAlwASAKwAAwCxAAcAugAAALwABwDFAAcAzgAAANAADADfAAEA4gAFAOoADwD7AAIA/wAOAA8BAwAUAQMAGQELACYBBgA0AREASAEAAEsBBwBUAQYAXgEAAGABFgB5ARAAjAEOAJwBAACeAQUApgEDAA==","P":[[22,"T"],[24,""],[25,"T"],[26,""],[30,"T"],[31,"U"],[32,"T"],[33,"U,T"],[34,"U"],[35,""],[38,"T"],[40,""],[41,"T"],[42,""],[47,"T"],[48,""],[64,"U"],[65,""],[74,"T"],[75,"U,T"],[76,"U"],[77,""],[100,"T"],[102,""],[103,"T"],[104,""],[106,"T"],[107,""],[110,"U"],[111,""],[116,"T"],[117,""],[118,"U,T"],[119,"U"],[120,""],[123,"T"],[125,""],[126,"T"],[127,""],[129,"U"],[130,""],[135,"U,T"],[136,"U"],[137,""],[140,"T"],[142,""],[143,"T"],[144,""],[146,"T"],[147,""],[149,"U"],[150,""],[154,"T"],[155,""],[156,"U,T"],[157,"U"],[158,""],[162,"T"],[164,""],[165,"T"],[166,""],[169,"T"],[170,"U"],[171,"T"],[172,"U,T"],[173,"U"],[174,""],[176,"T"],[178,""],[179,"T"],[180,""],[184,"T"],[185,""],[186,"U"],[187,"T"],[188,""],[189,"U,T"],[190,"U"],[191,""],[196,"T"],[198,""],[199,"T"],[200,""],[204,"T"],[205,""],[206,"U"],[207,""],[211,"T"],[212,"U,T"],[213,"U"],[214,""],[225,"T"],[227,""],[228,"T"],[229,""],[231,"T"],[232,"U"],[233,""],[237,"T"],[238,"U,T"],[239,"U"],[240,""],[243,"T"],[245,""],[246,"T"],[247,""],[249,"T"],[250,""],[253,"U"],[254,""],[259,"T"],[260,""],[261,"U,T"],[262,"U"],[263,""],[267,"T"],[269,""],[271,"T"],[272,""],[274,"T"],[275,""],[279,"U"],[280,""],[288,"T"],[289,"U,T"],[290,"U"],[291,""],[309,"T"],[313,""],[315,"T"],[317,""],[325,"T"],[327,""],[328,"U"],[330,"T"],[332,"U,T"],[334,"U"],[336,""],[339,"T"],[341,""],[342,"T"],[343,""],[346,"T"],[347,"U"],[348,""],[349,"T"],[350,""],[351,"U,T"],[352,"U"],[353,""],[365,"T"],[367,""],[368,"T"],[369,""],[374,"T"],[375,"U"],[376,"T"],[377,""],[378,"U,T"],[379,"U"],[380,""],[385,"T"],[387,""],[388,"T"],[389,""],[393,"T"],[394,"U"],[395,"T"],[396,"U,T"],[397,"U"],[398,""],[415,"T"],[417,""],[419,"T"],[420,"U"],[421,""],[422,"U,T"],[423,"U"],[424,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[15202]}