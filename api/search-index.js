var searchIndex = new Map(JSON.parse('[["MathPotato",{"t":"CCHCCCCCCCCCCCCCCGPPPNNNNNNNNNNNNNNKKFKMNNNNNNNNNMNMNNNMNMNMNOMNONNOONNMNNOONNNNMNNMNFNNNNNONNNOONNNNOFNNNNNNNNNNNNNNNONNNNPGNNNNNNNNNNNNNFNNNNNNNNNONNONNNOOOFNNNNNNNNNONNNNONNNNOCCCCKKMMFNNNNNNNNNNOONNNNOFNNNNNNNNNNNNNNNNNONNNNFNNNNNNNNNNNNNNNNOONOOONNNNSSSSSSSSPPPPPPGKGNNNNNNNNNNNNNNNNNNMNNNNNNNNNNFNNNNNNNNNONONNNPPPPPPGPPPPNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNCHHHHHHCCCHHHHHFNNONNNNNNN","n":["ast","lexer","main","parser","ast_node_types_enum","ast_tree","i32_node","infix_operation_ast_tree","infix_operation_enum","integer_statement_ast_node","integer_value_expression_ast_node","internal","patterns","potato_ast_node","potato_token","potato_token_types","variable_state_enum","AstNodeType","I32AstNode","InfixOperationAstNode","None","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","ContinuationNode","I32","MathPotatoAstTree","RootNode","add_root_node_id_and_type","","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","fmt","from","get_continuation_node_id_and_type","","get_i32_node_by_id","","get_infix_node_by_id","get_infix_nodes","get_root_node_id","","get_root_node_infix","","get_root_node_type","","i32_tree","i32_tree_len","","infix_operation_tree","infix_tree_len","into","last_changed_node_id","last_changed_node_type","merge","new","put_i32_ast_node","","put_infix_node","root_node_id","root_node_type","to_owned","try_from","try_into","type_id","update_i32_node","","update_infix_node_by_id","update_root_node_id_and_type","","I32AstNode","borrow","borrow_mut","fmt","from","from_internal_and_id","id","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_internal","try_from","try_into","type_id","value","InfixOperationAstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get","get_all","into","keys","len","new","put","to_owned","tree","try_from","try_into","type_id","update","Addition","InfixOperationType","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","to_owned","try_from","try_into","type_id","IntegerStatementAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","to_owned","token_type","try_from","try_into","type_id","variable_name","variable_state","variable_value","IntegerValueExpressionAstNode","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","guid","into","new_with_guid_and_value","new_with_value","new_with_value_and_parent","parent","to_owned","try_from","try_into","type_id","value","ast_tree_traits","i32_ast_node_internal","i32_ast_tree","infix_operation_ast_node","TypedAstTreeGetKeys","TypedAstTreeLen","keys","len","I32AstNodeInternal","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","into","new_value_parent_id_and_type","new_with_value","parent_id","parent_type","to_owned","try_from","try_into","type_id","value","I32AstTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","get_node_by_id","get_nodes","get_tree_count","into","keys","len","new","put","put_all","to_owned","tree","try_from","try_into","type_id","update","InfixAstNodeInternal","add_i32node_to_the_right","borrow","borrow_mut","check_if_left_empty_right_occupied","clone","clone_into","clone_to_uninit","fmt","from","get_left_node_id_and_type","get_operation_type","get_right_node","get_right_node_id_and_type","into","is_left_occupied","is_right_occupied","left_id","left_type","new_with_type_and_left_child_node","operation_type","right_id","right_type","to_owned","try_from","try_into","type_id","KEYWORD_I32","SIGN_ADDITION","SIGN_ASSIGNMENT","SIGN_CLOSE_PARENTHESES","SIGN_DIVISION","SIGN_OPEN_PARENTHESES","SIGN_SEMICOLON","WHITESPACE","IntegerStatementAstNode","","IntegerValueExpressionAstNode","","None","","PotatoAstNode","PotatoAstNodeGUID","PotatoAstNodeKind","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","eq","","fmt","","from","","get_uuid","into","","to_owned","","try_from","","try_into","","type_id","","PotatoToken","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","literal_value","to_owned","token_type","try_from","try_into","type_id","KeywordI32","LiteralIntegerValue","LiteralValueVariableIdentifier","None","OperationAddition","OperationDivision","PotatoTokenTypes","SignAssignment","SignCloseParentheses","SignOpenParentheses","SignSemicolon","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","","from","into","to_owned","to_string","try_from","try_into","type_id","Default","Final","Processing","VariableState","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","lexer","is_integer_value","is_token_semicolon","is_token_whitespace","lexing","tokenize","parse","parse_i32_statement","parse_i32_statement_expression","parser_error","create_error_message","parse_i32_statement","error_message","parse_i32_statement_expression","parse_literal_to_i32","ParseError","borrow","borrow_mut","details","fmt","from","into","new","try_from","try_into","type_id"],"q":[[0,"MathPotato"],[4,"MathPotato::ast"],[17,"MathPotato::ast::ast_node_types_enum"],[35,"MathPotato::ast::ast_tree"],[85,"MathPotato::ast::i32_node"],[102,"MathPotato::ast::infix_operation_ast_tree"],[123,"MathPotato::ast::infix_operation_enum"],[138,"MathPotato::ast::integer_statement_ast_node"],[158,"MathPotato::ast::integer_value_expression_ast_node"],[179,"MathPotato::ast::internal"],[183,"MathPotato::ast::internal::ast_tree_traits"],[187,"MathPotato::ast::internal::i32_ast_node_internal"],[205,"MathPotato::ast::internal::i32_ast_tree"],[228,"MathPotato::ast::internal::infix_operation_ast_node"],[255,"MathPotato::ast::patterns"],[263,"MathPotato::ast::potato_ast_node"],[301,"MathPotato::ast::potato_token"],[317,"MathPotato::ast::potato_token_types"],[344,"MathPotato::ast::variable_state_enum"],[362,"MathPotato::lexer"],[363,"MathPotato::lexer::lexer"],[368,"MathPotato::parser"],[372,"MathPotato::parser::parse_i32_statement"],[374,"MathPotato::parser::parse_i32_statement_expression"],[377,"MathPotato::parser::parser_error"],[388,"core::fmt"],[389,"core::result"],[390,"core::any"],[391,"uuid"],[392,"core::option"],[393,"alloc::vec"],[394,"std::collections::hash::map"],[395,"alloc::string"]],"i":"``````````````````h0000000000000000````AfAn00000000B`1Bd222323232202222222202222222202232`Bf000000000000000`C`0000000000000000000Ch`0000000000000`Cj000000000000000000`Db0000000000000000000``````DdDf`Cb0000000000000000`Bl000000000000000000000`Bh0000000000000000000000000````````DhDj1010```101010101010101010Ed2121212121`Dl00000000000000Cl00000`00000000000000000000D`00`00000000000000````````````````Al000000000","f":"``{{}b}``````````````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{h}}}h}{{d{d{fc}}}b{}}{{dj}b}{{}h}{{{d{h}}{d{h}}}l}{{{d{h}}{d{fn}}}A`}{cc{}}{{}c{}}{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}````{{{d{fAf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}{{{d{fAn}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}?>{{{d{An}}}An}=<{{}An}{{{d{An}}{d{fn}}}A`}:{{{d{B`}}}{{Bb{{Aj{Ahh}}}}}}{{{d{An}}}{{Bb{{Aj{Ahh}}}}}}{{{d{Bd}}Ah}{{Ab{BfAl}}}}{{{d{An}}Ah}{{Ab{BfAl}}}}{{{d{An}}Ah}{{Bb{{Aj{AhBh}}}}}}{{{d{An}}}{{Ab{{Bj{{Aj{AhBh}}}}Al}}}}{{{d{Af}}}{{Bb{Ah}}}}{{{d{An}}}{{Bb{Ah}}}}{{{d{Af}}Ah}{{Ab{{Aj{AhBh}}Al}}}}{{{d{An}}Ah}{{Ab{{Aj{AhBh}}Al}}}}{{{d{Af}}}h}{{{d{An}}}h}{AnBl}{{{d{Bd}}}Bn}{{{d{An}}}Bn}{AnC`}1{{}c{}}{AnAh}{Anh}{{{d{fAn}}An}{{Ab{bAl}}}}{{}An}{{{d{fBd}}Bf}{{Ab{BfAl}}}}{{{d{fAn}}Bf}{{Ab{BfAl}}}}{{{d{fAn}}Bh}{{Ab{{Aj{AhBh}}Al}}}}65{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{{{d{fBd}}AhBf}{{Ab{BfAl}}}}{{{d{fAn}}AhBf}{{Ab{BfAl}}}}{{{d{fAn}}AhBh}{{Ab{{Aj{AhBh}}Al}}}}{{{d{fAf}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}{{{d{fAn}}Ahh}{{Ab{{Aj{Ahh}}Al}}}}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bf}}{d{fn}}}A`}{cc{}}{{CbAh}{{Ab{BfAl}}}}{BfAh}{{}c{}}{{CdhAh}Bf}{CdBf}3{Bfh}{{{d{Bf}}}{{Ab{CbAl}}}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{BfCd}`>={{{d{C`}}}C`}{{d{d{fc}}}b{}}{{dj}b}{{{d{C`}}{d{fn}}}A`}?{{{d{C`}}Ah}{{Bb{Bh}}}}{{{d{C`}}}{{Ab{{Bj{{Aj{AhBh}}}}Al}}}}>{C`{{Bj{Ah}}}}{{{d{C`}}}Bn}{{}C`}{{{d{fC`}}AhBh}{{Ab{{Aj{AhBh}}Al}}}}{dc{}}{C`Cf}?>=2``{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ch}}}Ch}=<{{{d{Ch}}{d{Ch}}}l}{{{d{Ch}}{d{fn}}}A`}{cc{}}{{}c{}}8{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}`98{{{d{Cj}}}Cj}{{d{d{fc}}}b{}}{{dj}b}{{}Cj}{{{d{Cj}}{d{Cj}}}l}{{{d{Cj}}{d{fn}}}A`}:{CjAh}:{dc{}}{CjCl};:9{CjCn}{CjD`}{CjCd}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Db}}}Db}=<{{}Db}{{{d{Db}}{d{Db}}}l}{{{d{Db}}{d{fn}}}A`}{cc{}}{DbAh}{{}c{}}{{AhCd}Db}{CdDb}{{CdAh}Db}4{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{DbCd}``````{Dd{{Bj{Ah}}}}{{{d{Df}}}Bn}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Cb}}}Cb}{{d{d{fc}}}b{}}{{dj}b}{{{d{Cb}}{d{fn}}}A`}{cc{}}{{}c{}}{{CdhAh}Cb}{CdCb}{CbAh}{Cbh}{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{CbCd}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bl}}}Bl}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bl}}{d{fn}}}A`}{cc{}}{{{d{Bl}}Ah}{{Bb{Cb}}}}{{{d{Bl}}{Bj{Ah}}}{{Bb{{Cf{AhCb}}}}}}{{{d{Bl}}}Bn}{{}c{}}{Bl{{Bj{Ah}}}}2{{}Bl}{{{d{fBl}}AhCb}{{Ab{{Aj{AhCb}}Al}}}}{{{d{fBl}}{Cf{AhCb}}}b}{dc{}}{BlCf}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}6`{{{d{fBh}}Ah}{{Ab{{Aj{AhBh}}Al}}}}{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bh}}}{{Ab{bAl}}}}{{{d{Bh}}}Bh}{{d{d{fc}}}b{}}{{dj}b}{{{d{Bh}}{d{fn}}}A`}{cc{}}{{{d{Bh}}}{{Bb{{Aj{Ahh}}}}}}{{{d{Bh}}}Ch}11{{}c{}}{{{d{Bh}}}l}0{BhAh}{Bhh}{{ChhAh}Bh}{BhCh}32{dc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}{{}d}0000000`````````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Dh}}}Dh}{{{d{Dj}}}Dj}{{d{d{fc}}}b{}}0{{dj}b}0{{}Dh}{{}Dj}{{{d{Dh}}{d{Dh}}}l}{{{d{Dj}}{d{Dj}}}l}{{{d{Dh}}{d{fn}}}A`}{{{d{Dj}}{d{fn}}}A`}{cc{}}0{{}b}{{}c{}}0{dc{}}0{c{{Ab{e}}}{}{}}0{{}{{Ab{c}}}{}}0{dAd}0`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Dl}}}Dl}{{d{d{fc}}}b{}}{{dj}b}{{{d{Dl}}{d{Dl}}}l}{{{d{Dl}}{d{fn}}}A`}=;{DlCn};{DlCl};:9```````````87{{{d{Cl}}}Cl}65{{}Cl}{{{d{Cl}}{d{Cl}}}l}{{{d{Cl}}{d{fn}}}A`}0{cc{}}{{}c{}}{dc{}}{dCn}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{D`}}}D`}{{d{d{fc}}}b{}}{{dj}b}{{}D`}{{{d{D`}}{d{D`}}}l}{{{d{D`}}{d{fn}}}A`}>=<:98`{{{d{Dn}}}l}{{{d{E`}}}l}0{{{d{Dn}}}{{Bj{Dl}}}}{{{d{Dn}}}Dl}{{{Bj{Dl}}}{{Ab{AnAl}}}}```{BnCn}{{Bn{d{{Eb{Dl}}}}}{{Ab{{Aj{BnAn}}Al}}}}1{{Bn{Bj{Dl}}An}{{Ab{AnAl}}}}{{{d{Dl}}}Cd}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{AlCn}{{{d{Al}}{d{fn}}}A`}{cc{}}{{}c{}}{CnAl}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{dAd}","D":"Hj","p":[[1,"unit"],[1,"reference",null,null,1],[0,"mut"],[6,"AstNodeType",17],[1,"u8"],[1,"bool"],[5,"Formatter",388],[8,"Result",388],[6,"Result",389,null,1],[5,"TypeId",390],[10,"RootNode",35],[5,"Uuid",391],[1,"tuple",null,null,1],[5,"ParseError",377],[5,"MathPotatoAstTree",35],[10,"ContinuationNode",35],[6,"Option",392,null,1],[10,"I32",35],[5,"I32AstNode",85],[5,"InfixAstNodeInternal",228],[5,"Vec",393],[5,"I32AstTree",205],[1,"usize"],[5,"InfixOperationAstTree",102],[5,"I32AstNodeInternal",187],[1,"i32"],[5,"HashMap",394],[6,"InfixOperationType",123],[5,"IntegerStatementAstNode",138],[6,"PotatoTokenTypes",317],[5,"String",395],[6,"VariableState",344],[5,"IntegerValueExpressionAstNode",158],[10,"TypedAstTreeGetKeys",183],[10,"TypedAstTreeLen",183],[6,"PotatoAstNode",263],[6,"PotatoAstNodeKind",263],[5,"PotatoToken",301],[1,"str"],[1,"char"],[1,"slice"],[10,"PotatoAstNodeGUID",263]],"r":[],"b":[[335,"impl-Debug-for-PotatoTokenTypes"],[336,"impl-Display-for-PotatoTokenTypes"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAD8BLQABABAAEwAKACAABAAoAAgAMgABADUABAA8AAEAQAAAAEIAAABGAAEASQABAE0AAwBSAAMAVwACAFsAAQBeAA8AbwABAHIAEgCHAAMAjAAHAJUAAACXAAcAoAAHAKkAAACrAAwAugABAL0ABQDFAA8A1gACANoADgDqAAMA7wADAPQACwABAQYADwERACMBAAAmAQcALwEGADkBAAA7ARYAVAEQAGcBDgB3AQAAeQEFAIEBAwA=","P":[[21,"T"],[23,""],[24,"T"],[25,""],[29,"T"],[30,"U"],[31,"T"],[32,"U,T"],[33,"U"],[34,""],[41,"T"],[43,""],[44,"T"],[45,""],[48,"T"],[49,""],[66,"U"],[67,""],[76,"T"],[77,"U,T"],[78,"U"],[79,""],[86,"T"],[88,""],[89,"T"],[90,""],[92,"U"],[93,""],[98,"U,T"],[99,"U"],[100,""],[103,"T"],[105,""],[106,"T"],[107,""],[109,"T"],[110,""],[112,"U"],[113,""],[117,"T"],[118,""],[119,"U,T"],[120,"U"],[121,""],[125,"T"],[127,""],[128,"T"],[129,""],[132,"T"],[133,"U"],[134,"T"],[135,"U,T"],[136,"U"],[137,""],[139,"T"],[141,""],[142,"T"],[143,""],[147,"T"],[148,""],[149,"U"],[150,"T"],[151,""],[152,"U,T"],[153,"U"],[154,""],[159,"T"],[161,""],[162,"T"],[163,""],[167,"T"],[168,""],[169,"U"],[170,""],[174,"T"],[175,"U,T"],[176,"U"],[177,""],[188,"T"],[190,""],[191,"T"],[192,""],[194,"T"],[195,"U"],[196,""],[200,"T"],[201,"U,T"],[202,"U"],[203,""],[206,"T"],[208,""],[209,"T"],[210,""],[212,"T"],[213,""],[216,"U"],[217,""],[222,"T"],[223,""],[224,"U,T"],[225,"U"],[226,""],[230,"T"],[232,""],[234,"T"],[235,""],[237,"T"],[238,""],[242,"U"],[243,""],[251,"T"],[252,"U,T"],[253,"U"],[254,""],[272,"T"],[276,""],[278,"T"],[280,""],[288,"T"],[290,""],[291,"U"],[293,"T"],[295,"U,T"],[297,"U"],[299,""],[302,"T"],[304,""],[305,"T"],[306,""],[309,"T"],[310,"U"],[311,""],[312,"T"],[313,""],[314,"U,T"],[315,"U"],[316,""],[328,"T"],[330,""],[331,"T"],[332,""],[337,"T"],[338,"U"],[339,"T"],[340,""],[341,"U,T"],[342,"U"],[343,""],[348,"T"],[350,""],[351,"T"],[352,""],[356,"T"],[357,"U"],[358,"T"],[359,"U,T"],[360,"U"],[361,""],[378,"T"],[380,""],[382,"T"],[383,"U"],[384,""],[385,"U,T"],[386,"U"],[387,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[13370]}